{"version":3,"sources":["types.ts","components/ColorDot.tsx","constants.ts","utils/index.ts","components/PuzzleSelection.tsx","components/Notes.tsx","components/DinoCrisis.tsx","components/Hexa.tsx","components/Konami.tsx","components/SleepingDogs.tsx","components/Spyro.tsx","components/Zelda.tsx","components/Confettis.tsx","components/Credits.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","Mode","Progress","Puzzle","RainbowColor","RupeeColor","Move","Clue","ColorDot","props","className","color","levels","miniSave","onRejectLevel","onSelectLevel","initial","charAt","toUpperCase","isDone","Done","isSelected","includes","classColor","classes","classnames","selected","onClick","MIX_ONE_COLOR_MSG","MIX_TWO_COLORS_MSG","MIX_THREE_COLORS_MSG","MIX_MODE_MSG","VALID_CODES","getPlural","str","count","canMix2","save","red","green","blue","canMix3","magentaDone","magenta","yellowDone","yellow","cyanDone","cyan","getLevelsText","mode","length","mix","getResultLevelMix2","getResultLevelMix3","join","Red","Green","Blue","Cyan","Magenta","Yellow","Additive","Subtractive","Black","White","getPowerLogs","codeMsg","codes","getCodes","commonLogsTemp","commonLogs","whiteDone","white","canUseSubtractiveMix","getRandomInt","max","Math","floor","random","push","PuzzleSelection","Hidden","hasLevel2","hasLevel3","black","hasLevel4","Notes","logs","puzzle","powerLogs","reversedLogs","reverse","slice","hasPowerLogs","map","log","index","key","split","word","additionalClass","Object","values","bgClass","italicClass","codeClass","toLowerCase","successClass","failureClass","objectiveClass","renderLog","Menu","renderPowerLog","DinoCrisis","setSave","setPuzzle","setLogs","Orange","Violet","React","rect","setRect","r","rectClasses","copy","b","col1","col2","temp","copyRect","clone","isEqual","Hexa","initialClues","code","setCode","value","type","onChange","e","newCode","currentTarget","test","Konami","pos","x","y","position","setPosition","sequence","setSequence","Left","Right","Up","Down","correctSequence","onDance","move","decaX","decaY","newPosX","newPosY","newSequence","p","isPos","squareClasses","SleepingDogs","newDigit","get4DigitsCode","correctCode","clues","setClues","onValid","uniq","copyClues","d","i","delta","copyCode","renderInput","classesDigit","Spyro","tiles","setTiles","renderRow","rowIndexes","tile","isExistingTile","copyTiles","some","t","Zelda","openChest","room","newRoom","setRoom","deltaRupees","getRupees","newRupees","rupees","chestMsg","Purple","getRupeesColor","setRupees","classesRoom","getRoomColor","Confettis","useWindowSize","width","height","Credits","guesses","setGuesses","correctGuesses","newGuesses","getNextColorGuess","src","title","frameBorder","allow","App","setMode","Available","getDefaultSave","setLevels","level","setLevel","isMobile","rel","href","size","classesMixing","additive","subtractive","integrity","data-cross-origin","subheader","getPuzzleText","colorClass","getColorPuzzle","backgroundColorClass","getColorBackgroundPuzzle","substring","renderSubheader","floorIndex","isBlackInaccessible","isWhiteInaccessible","isInaccessible","newLevels","additionalLogs","hasLevel","filter","l","getNewLevelsMix3","resultLevelMix3","levelSave","resultLevelMix2","getNewLevelsMix2","levelsText","getPuzzleColor","msgInvalid","isValidCode","newLogs","floor1","floor2","additionalMsgInvalid","getCodesInvalidMsg","logsInvalid","newMode","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d34f5c3b.chunk.js","sourcesContent":["export enum Color {\n  Red = 'red',\n  Green = 'green',\n  Blue = 'blue',\n  Cyan = 'cyan',\n  Magenta = 'magenta',\n  Yellow = 'yellow',\n  White = 'white',\n  Black = 'black'\n}\n\nexport enum Mode {\n  Additive = 'additive',\n  Subtractive = 'subtractive'\n}\n\nexport enum Progress {\n  Hidden = 'hidden',\n  Available = 'available',\n  Done = 'done'\n}\n\nexport interface Save {\n  red: Progress;\n  green: Progress;\n  blue: Progress;\n  cyan: Progress;\n  magenta: Progress;\n  yellow: Progress;\n  white: Progress;\n  black: Progress;\n}\n\nexport enum Puzzle {\n  Confettis = 'confettis',\n  Credits = 'credits',\n  DinoCrisis = 'dinoCrisis',\n  Hexa = 'hexa',\n  Konami = 'konami',\n  Menu = 'menu',\n  SleepingDogs = 'sleepingDogs',\n  Spyro = 'spyro',\n  Zelda = 'zelda'\n}\n\nexport enum RainbowColor {\n  Red = 'red',\n  Orange = 'orange',\n  Yellow = 'yellow',\n  Green = 'green',\n  Blue = 'blue',\n  Violet = 'violet'\n}\n\nexport enum RupeeColor {\n  Red = 'red',\n  Green = 'green',\n  Blue = 'blue',\n  Purple = 'purple'\n}\n\nexport enum Move {\n  Left = 'left',\n  Right = 'right',\n  Up = 'up',\n  Down = 'down'\n}\n\nexport enum Clue {\n  Green = 'green',\n  Orange = 'orange',\n  Red = 'red',\n  White = 'white'\n}\n","import * as React from 'react';\nimport { Color, Progress } from '../types';\nimport classnames from 'classnames';\n\nexport interface ColorDotProps {\n  className?: string;\n  onRejectLevel?: () => void;\n  onSelectLevel?: () => void;\n  levels: Color[];\n  color: Color;\n  miniSave: Progress;\n}\n\nconst ColorDot: React.FC<ColorDotProps> = (props) => {\n  const { className, color, levels, miniSave, onRejectLevel, onSelectLevel } = props;\n  const initial = color.charAt(0).toUpperCase();\n  const isDone = miniSave === Progress.Done;\n  const isSelected = levels.includes(color);\n\n  const classColor = `bg-${color}`;\n  const classes = classnames('circle inline-block', classColor, className, { selected: isSelected });\n\n  return (\n    <div className=\"inline dot\">\n      {isDone && (\n        <span className=\"checkmark\">\n          <div className=\"checkmark_circle\"></div>\n          <div className=\"checkmark_stem\"></div>\n          <div className=\"checkmark_kick\"></div>\n        </span>\n      )}\n      <div className={classes} onClick={onSelectLevel ?? onRejectLevel}>\n        <span className=\"initial\">{initial}</span>\n      </div>\n    </div>\n  );\n};\n\nexport { ColorDot };\n","export const CODE_LENGTH = 6;\nexport const MIX_ONE_COLOR_MSG = 'You can select a color!';\nexport const MIX_TWO_COLORS_MSG = 'You completed floor 1! You can mix 2 colors!';\nexport const MIX_THREE_COLORS_MSG = 'You completed both floor 1 and floor 2! You can mix 3 colors!';\nexport const MIX_MODE_MSG = `You completed floors 1, 2 and 3! You can mix 3 colors with a different mixing! (subtractive)`;\nexport const RUPEES_INITIAL_COUNT = 1;\nexport const CODE_RED = 'BEDBAD';\nexport const CODE_BLUE = 'DABBED';\nexport const CODE_GREEN = 'DADDAD';\nexport const CODE_CYAN = 'BACFED';\nexport const CODE_MAGENTA = 'FACADE';\nexport const CODE_YELLOW = 'DECADE';\nexport const CODE_WHITE = 'DEFBAE';\nexport const VALID_CODES = [CODE_RED, CODE_GREEN, CODE_BLUE, CODE_CYAN, CODE_MAGENTA, CODE_YELLOW, CODE_WHITE];\n","import {\n  CODE_RED,\n  CODE_BLUE,\n  CODE_GREEN,\n  CODE_CYAN,\n  CODE_WHITE,\n  CODE_LENGTH,\n  CODE_MAGENTA,\n  CODE_YELLOW,\n  MIX_ONE_COLOR_MSG,\n  MIX_THREE_COLORS_MSG,\n  MIX_TWO_COLORS_MSG,\n  VALID_CODES,\n  MIX_MODE_MSG\n} from '../constants';\nimport { Color, Progress, Save, Mode, Puzzle, RupeeColor } from '../types';\n\nconst getPlural = (str: string, count: number) => {\n  if (count === 1) return str;\n  return `${str}s`;\n};\n\nconst getDefaultSave = () => {\n  const { Available, Hidden, Done } = Progress;\n\n  // TODO: change\n  const defaultSave: Save = {\n    red: Available,\n    green: Available,\n    blue: Available,\n    cyan: Hidden,\n    magenta: Hidden,\n    yellow: Hidden,\n    white: Hidden,\n    black: Hidden\n  };\n\n  return defaultSave;\n};\n\nconst canMix2 = (save: Save) => {\n  const { Done } = Progress;\n\n  const { red, green, blue } = save;\n\n  const redDone = red === Done;\n  const greenDone = green === Done;\n  const blueDone = blue === Done;\n\n  return redDone && greenDone && blueDone;\n};\n\nconst canMix3 = (save: Save) => {\n  const { Done } = Progress;\n\n  const { magenta, yellow, cyan } = save;\n\n  const magentaDone = magenta === Done;\n  const yellowDone = yellow === Done;\n  const cyanDone = cyan === Done;\n\n  return canMix2(save) && magentaDone && yellowDone && cyanDone;\n};\n\nconst canUseSubtractiveMix = (save: Save) => {\n  const { Done } = Progress;\n\n  const { white } = save;\n\n  const whiteDone = white === Done;\n\n  return canMix3(save) && whiteDone;\n};\n\nconst hasLevel2 = (save: Save) => {\n  const { Hidden } = Progress;\n  const { cyan, magenta, yellow } = save;\n\n  return !(cyan === Hidden && magenta === Hidden && yellow === Hidden);\n};\n\nconst hasLevel3 = (save: Save) => {\n  const { Hidden } = Progress;\n  const { white } = save;\n\n  return white !== Hidden;\n};\n\nconst hasLevel4 = (save: Save) => {\n  const { Hidden } = Progress;\n  const { black } = save;\n\n  return black !== Hidden;\n};\n\nconst getNewLevelsMix2 = (levels: Color[], level: Color) => {\n  const hasLevel = levels.includes(level);\n\n  if (levels.length === 0) return [level];\n  if (levels.length === 1) {\n    return hasLevel ? [] : [...levels, level];\n  }\n\n  return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0]];\n};\n\nconst getNewLevelsMix3 = (levels: Color[], level: Color) => {\n  const hasLevel = levels.includes(level);\n\n  if (levels.length === 0) return [level];\n  if (levels.length === 1) {\n    return hasLevel ? [] : [...levels, level];\n  } else if (levels.length === 2) {\n    return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0], levels[1]];\n  }\n\n  return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0]];\n};\n\nconst getLevelsText = (levels: Color[], mode: Mode) => {\n  if (levels.length === 0) return 'No color selected';\n  if (levels.length === 1) return `Color ${levels[0]} is selected`;\n\n  const mix = levels.length === 2 ? getResultLevelMix2(levels, mode) : getResultLevelMix3(levels, mode);\n\n  return `Colors ${levels.join(' ')} are selected: mix is ${mix}`;\n};\n\nconst getResultLevelMix2 = (levels: Color[], mode: Mode) => {\n  if (levels.length !== 2) return undefined;\n\n  const { Red, Green, Blue, Cyan, Magenta, Yellow } = Color;\n\n  if (mode === Mode.Additive) {\n    if (levels.includes(Red) && levels.includes(Green)) return Yellow;\n    if (levels.includes(Green) && levels.includes(Blue)) return Cyan;\n    if (levels.includes(Red) && levels.includes(Blue)) return Magenta;\n  }\n\n  if (mode === Mode.Subtractive) {\n    if (levels.includes(Magenta) && levels.includes(Cyan)) return Blue;\n    if (levels.includes(Cyan) && levels.includes(Yellow)) return Green;\n    if (levels.includes(Magenta) && levels.includes(Yellow)) return Red;\n  }\n\n  return undefined;\n};\n\nconst getResultLevelMix3 = (levels: Color[], mode: Mode) => {\n  if (levels.length !== 3) return undefined;\n\n  const { Black, Red, Green, Blue, White, Cyan, Magenta, Yellow } = Color;\n\n  if (mode === Mode.Additive && levels.includes(Red) && levels.includes(Green) && levels.includes(Blue)) {\n    return White;\n  }\n\n  if (mode === Mode.Subtractive && levels.includes(Magenta) && levels.includes(Cyan) && levels.includes(Yellow)) {\n    return Black;\n  }\n\n  return undefined;\n};\n\nconst getPowerLogs = (save: Save) => {\n  const currentCode = '';\n  const codeMsg = `Or type a ${CODE_LENGTH}-letter cheat code below to load a save`;\n  const codes = getCodes(save);\n  const commonLogsTemp = [currentCode, codeMsg];\n  const commonLogs =\n    codes.length > 0 ? [...commonLogsTemp, `Unlocked cheat code(s): ${codes.join(' ')}`] : commonLogsTemp;\n\n  if (canUseSubtractiveMix(save)) return [MIX_MODE_MSG, ...commonLogs];\n  if (canMix3(save)) return [MIX_THREE_COLORS_MSG, ...commonLogs];\n  if (canMix2(save)) return [MIX_TWO_COLORS_MSG, ...commonLogs];\n\n  return [MIX_ONE_COLOR_MSG, ...commonLogs];\n};\n\nconst getRoomColor = (room: number) => {\n  if (room < 3) return Color.Green;\n  if (room < 5) return Color.Blue;\n  if (room === 5) return Color.Red;\n\n  return Color.Yellow;\n};\n\nconst getRandomInt = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst getRupees = (room: number) => {\n  if (room < 3) return 1;\n  if (room < 5) return 5;\n  if (room === 5) return 20;\n\n  return 50;\n};\n\nconst getRupeesColor = (rupees: number) => {\n  if (rupees === 1) return RupeeColor.Green;\n  if (rupees === 5) return RupeeColor.Blue;\n  if (rupees === 20) return RupeeColor.Red;\n  if (rupees === 50) return RupeeColor.Purple;\n};\n\nconst get4DigitsCode = () => {\n  const code: number[] = [];\n\n  while (code.length !== 4) {\n    let newDigit = getRandomInt(10);\n\n    while (code.includes(newDigit)) {\n      newDigit = getRandomInt(10);\n    }\n\n    code.push(newDigit);\n  }\n\n  return code;\n};\n\nconst getNextColorGuess = (color: Color) => {\n  const { Black, Red, Green, Blue, Magenta, Yellow, Cyan, White } = Color;\n  if (color === Red) return Green;\n  if (color === Green) return Blue;\n  if (color === Blue) return Cyan;\n  if (color === Cyan) return Magenta;\n  if (color === Magenta) return Yellow;\n\n  return Red;\n};\n\nconst getCodesInvalidMsg = (code: string) => {\n  if (code === 'BIATCH') return `Also, that's not nice. You think you're Snoop Dogg?`;\n  if (code === 'CHRIST') return `Nobody is coming to save you on this puzzle game`;\n  if (code === 'COLORS') return `Just play the game, you'll see lots of colors :)`;\n  if (code === 'FAITHY') return 'Nice try though Faithychouchou, hehe';\n  if (code === 'FRANCE') return `Tant pis, c'est la vie !`;\n  if (['FLOWER', 'NATURE'].includes(code)) return `If you find this game too hard, maybe have a break?`;\n  if (code === 'HELPME') return `No thank you, I don't want to help you`;\n  if (code === 'KONAMI') return `I'll give you a clue though: blue is Konami Code`;\n  if (code === 'LOSING') return `You are not losing, you are just not even trying`;\n  if (code === 'MAKEUP') return `Stop making up cheat codes!`;\n  if (code === 'PELLAS') return `Nice try but that would be too easy`;\n  if (code === 'PLEASE') return `Just play the game. Please and thank you!`;\n  if (code === 'POWERS') return `You have some powers, but apparently guessing cheat codes is not one of them`;\n  if (code === 'PUZZLE') return `You look puzzled though, that's too bad`;\n  if (code === 'RANDOM') return `Maybe stop trying to guess cheat codes randomly?`;\n  if (['DRAGON', 'YELLOW'].includes(code)) return `A clue though: yellow is from Spyro 2, Idol Springs`;\n  if (code === 'THANKS') return `I didn't load any save, but ok you're welcome I guess?`;\n\n  return '';\n};\n\nconst getColorPuzzle = (puzzle: Puzzle) => {\n  const { Black, Red, Green, Blue, Magenta, Yellow, Cyan, White } = Color;\n  const { Confettis, Menu, DinoCrisis, Hexa, Konami, Zelda, SleepingDogs, Spyro } = Puzzle;\n\n  switch (puzzle) {\n    case Confettis:\n      return Black;\n    case Konami:\n      return Blue;\n    case DinoCrisis:\n      return Green;\n    case Hexa:\n      return Magenta;\n    case Zelda:\n      return Red;\n    case Spyro:\n      return Yellow;\n    case SleepingDogs:\n      return Cyan;\n    default:\n      return White;\n  }\n};\n\nconst getColorBackgroundPuzzle = (puzzle: Puzzle) => {\n  const { Confettis } = Puzzle;\n  const { Black, White } = Color;\n\n  if (puzzle === Confettis) return White;\n  return Black;\n};\n\nconst getPuzzleColor = (level: Color) => {\n  const { Black, Red, Green, Blue, Magenta, Yellow, Cyan, White } = Color;\n  const { Credits, Confettis, Menu, DinoCrisis, Hexa, Konami, Zelda, SleepingDogs, Spyro } = Puzzle;\n\n  switch (level) {\n    case White:\n      return Credits;\n    case Black:\n      return Confettis;\n    case Blue:\n      return Konami;\n    case Green:\n      return DinoCrisis;\n    case Magenta:\n      return Hexa;\n    case Red:\n      return Zelda;\n    case Yellow:\n      return Spyro;\n    case Cyan:\n      return SleepingDogs;\n    default:\n      return Menu;\n  }\n};\n\nconst getPuzzleText = (puzzle: Puzzle) => {\n  const { Credits, Confettis, Menu, DinoCrisis, Hexa, Konami, SleepingDogs, Spyro, Zelda } = Puzzle;\n\n  switch (puzzle) {\n    case Credits:\n      return 'What is this?';\n    case Confettis:\n      return 'Bravo';\n    case Menu:\n      return 'Menu';\n    case DinoCrisis:\n      return 'Gay Pride';\n    case Hexa:\n      return 'Mathematical Base';\n    case Konami:\n      return 'Be like Konami';\n    case SleepingDogs:\n      return 'Code';\n    case Spyro:\n      return 'Year of the Rabbit';\n    case Zelda:\n      return 'Random Chest';\n    default:\n      return 'Puzzle';\n  }\n};\n\nconst isValidCode = (code: string) => {\n  return VALID_CODES.includes(code);\n};\n\nconst getCodes = (save: Save) => {\n  const codes: string[] = [];\n\n  const { red, green, blue, cyan, magenta, yellow, white } = save;\n  const { Done } = Progress;\n\n  if (white === Done) {\n    codes.push(CODE_WHITE);\n\n    return codes;\n  }\n\n  if (cyan === Done || magenta === Done || yellow === Done) {\n    if (cyan === Done) codes.push(CODE_CYAN);\n    if (magenta === Done) codes.push(CODE_MAGENTA);\n    if (yellow === Done) codes.push(CODE_YELLOW);\n\n    return codes;\n  }\n\n  if (red === Done || green === Done || blue === Done) {\n    if (red === Done) codes.push(CODE_RED);\n    if (green === Done) codes.push(CODE_GREEN);\n    if (blue === Done) codes.push(CODE_BLUE);\n\n    return codes;\n  }\n\n  return codes;\n};\n\nexport {\n  canUseSubtractiveMix,\n  getNextColorGuess,\n  getColorPuzzle,\n  getCodes,\n  getCodesInvalidMsg,\n  getPlural,\n  getRandomInt,\n  getResultLevelMix2,\n  getResultLevelMix3,\n  canMix2,\n  canMix3,\n  getDefaultSave,\n  hasLevel2,\n  hasLevel3,\n  hasLevel4,\n  getLevelsText,\n  getNewLevelsMix2,\n  getNewLevelsMix3,\n  getPowerLogs,\n  getPuzzleText,\n  getPuzzleColor,\n  getRoomColor,\n  getRupees,\n  getRupeesColor,\n  get4DigitsCode,\n  isValidCode,\n  getColorBackgroundPuzzle\n};\n","import * as React from 'react';\nimport { Color } from '../types';\nimport classnames from 'classnames';\nimport { ColorDot } from './ColorDot';\nimport { Mode, Progress, Save } from '../types';\nimport { hasLevel2, hasLevel3, hasLevel4 } from '../utils';\n\nexport interface PuzzleSelectionProps {\n  className?: string;\n  levels: Color[];\n  mode: Mode;\n  onRejectLevel: (level: Color) => () => void;\n  onSelectLevel: (level: Color) => () => void;\n  save: Save;\n}\n\nconst PuzzleSelection: React.FC<PuzzleSelectionProps> = (props) => {\n  const { className, mode, save, levels, onRejectLevel, onSelectLevel } = props;\n  const { Hidden } = Progress;\n  const { Red, Green, Blue, Magenta, Cyan, Yellow, White, Black } = Color;\n  const { red, green, blue, magenta, cyan, yellow, white } = save;\n  const { Additive, Subtractive } = Mode;\n\n  const renderLevel2 = () => {\n    const hasLvl2 = hasLevel2(save);\n\n    if (!hasLvl2) return null;\n\n    return (\n      <>\n        <br />\n        <h2>Floor 2</h2>\n        <div className=\"block\">\n          {cyan !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Cyan}\n              levels={levels}\n              onRejectLevel={mode === Additive ? onRejectLevel(Cyan) : onSelectLevel(Cyan)}\n              miniSave={save.cyan}\n            />\n          )}\n          {magenta !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Magenta}\n              levels={levels}\n              onRejectLevel={mode === Additive ? onRejectLevel(Magenta) : onSelectLevel(Magenta)}\n              miniSave={save.magenta}\n            />\n          )}\n          {yellow !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Yellow}\n              levels={levels}\n              onRejectLevel={mode === Additive ? onRejectLevel(Yellow) : onSelectLevel(Yellow)}\n              miniSave={save.yellow}\n            />\n          )}\n        </div>\n      </>\n    );\n  };\n\n  const renderLevel3 = () => {\n    const hasLvl3 = hasLevel3(save);\n\n    if (!hasLvl3) return null;\n\n    return (\n      <div className=\"flex-one\">\n        <br />\n        <h2>Floor 3</h2>\n        <div className=\"block\">\n          <ColorDot\n            className=\"black\"\n            color={White}\n            levels={levels}\n            onRejectLevel={onRejectLevel(White)}\n            miniSave={save.white}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  const renderLevel4 = () => {\n    const hasLvl4 = hasLevel4(save);\n\n    if (!hasLvl4) return null;\n\n    return (\n      <div className=\"flex-one\">\n        <br />\n        <h2>Floor 4</h2>\n        <div className=\"block\">\n          <ColorDot\n            className=\"white\"\n            color={Black}\n            levels={levels}\n            onRejectLevel={onRejectLevel(Black)}\n            miniSave={save.black}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <h2>Floor 1</h2>\n      <div className=\"block\">\n        <ColorDot\n          className=\"black\"\n          color={Red}\n          levels={levels}\n          onSelectLevel={mode === Additive ? onSelectLevel(Red) : onRejectLevel(Red)}\n          miniSave={save.red}\n        />\n        <ColorDot\n          className=\"black\"\n          color={Green}\n          levels={levels}\n          onSelectLevel={mode === Additive ? onSelectLevel(Green) : onRejectLevel(Green)}\n          miniSave={save.green}\n        />\n        <ColorDot\n          className=\"black\"\n          color={Blue}\n          levels={levels}\n          onSelectLevel={mode === Additive ? onSelectLevel(Blue) : onRejectLevel(Blue)}\n          miniSave={save.blue}\n        />\n      </div>\n      {renderLevel2()}\n      <div className=\"flex\">\n        {renderLevel3()}\n        {renderLevel4()}\n      </div>\n    </>\n  );\n};\n\nexport { PuzzleSelection };\n","import * as React from 'react';\nimport { Color, Move, Save, RainbowColor, RupeeColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { getPowerLogs } from '../utils';\nimport { VALID_CODES } from '../constants';\n\nexport interface NotesProps {\n  className?: string;\n  logs: string[];\n  puzzle: Puzzle;\n  save: Save;\n}\n\nconst Notes: React.FC<NotesProps> = (props) => {\n  const { className, logs, puzzle, save } = props;\n  const powerLogs = getPowerLogs(save);\n  const reversedLogs = [...logs].reverse().slice(0, 5);\n\n  const hasPowerLogs = powerLogs.length > 0;\n\n  const renderLog = (log: string) => {\n    const words = log.split(' ');\n\n    return words.map((word: string, index) => {\n      const additionalClass =\n        Object.values(Color).includes(word as any) ||\n        Object.values(RainbowColor).includes(word as any) ||\n        Object.values(RupeeColor).includes(word as any) ||\n        Object.values(Move).includes(word as any)\n          ? `${word} italic`\n          : '';\n\n      const bgClass = word === Color.Black ? 'bg-white' : '';\n\n      const italicClass = word === 'hexactly' ? 'italic' : '';\n      const codeClass = VALID_CODES.includes(word) ? word.toLowerCase() : '';\n\n      const successClass = ['Congrats!', 'Success:'].includes(word) ? 'green' : '';\n      const failureClass = word === 'Failure:' ? 'red' : '';\n      const objectiveClass = ['Objective:', 'additive', 'subtractive'].includes(word) ? 'orange' : '';\n      const classes = classnames(\n        bgClass,\n        codeClass,\n        objectiveClass,\n        italicClass,\n        additionalClass,\n        successClass,\n        failureClass,\n        'inline'\n      );\n\n      const key = `${word}-${index}`;\n\n      if (word === 'rainbow!') {\n        return (\n          <>\n            <div className=\"inline red\">r</div>\n            <div className=\"inline orange\">a</div>\n            <div className=\"inline yellow\">i</div>\n            <div className=\"inline white\">n</div>\n            <div className=\"inline green\">b</div>\n            <div className=\"inline blue\">o</div>\n            <div className=\"inline violet\">w</div>\n          </>\n        );\n      }\n\n      return (\n        <>\n          <div className={classes} key={key}>\n            {word}\n          </div>\n          <div className=\"inline bg-black\"> </div>\n        </>\n      );\n    });\n  };\n\n  const renderPowerLog = (log: string) => {\n    const words = log.split(' ');\n\n    return words.map((word: string, index) => {\n      const codeClass = VALID_CODES.includes(word) ? word.toLowerCase() : '';\n      const classes = classnames('inline power', codeClass);\n      const key = `${word}-${index}`;\n\n      return (\n        <div className={classes} key={key}>\n          {word}{' '}\n        </div>\n      );\n    });\n  };\n\n  const renderPowerLogs = () => {\n    if (!hasPowerLogs) return null;\n    if (puzzle !== Puzzle.Menu) return null;\n\n    return (\n      <>\n        <br />\n        <h2>Powers</h2>\n        {powerLogs.map((log, index) => (\n          <div className=\"block\" key={`${log}-${index}`}>\n            {renderPowerLog(log)}\n          </div>\n        ))}\n      </>\n    );\n  };\n\n  const renderLogs = () => {\n    return reversedLogs.map((log, index) => (\n      <div className=\"block\" key={`${log}-${index}`}>\n        {renderLog(log)}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"\">\n      <h2>Logs</h2>\n      {renderLogs()}\n      {renderPowerLogs()}\n    </div>\n  );\n};\n\nexport { Notes };\n","import * as React from 'react';\nimport { Save, Progress, RainbowColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface DinoCrisisProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst DinoCrisis: React.FC<DinoCrisisProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const { Red, Orange, Yellow, Green, Blue, Violet } = RainbowColor;\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Produce a red to violet rainbow']), []);\n\n  const [rect, setRect] = React.useState<RainbowColor[]>([Violet, Orange, Yellow, Red, Green, Blue]);\n  const buttonsIds = [0, 1, 2, 3, 4];\n\n  return (\n    <>\n      <div className=\"flex margin-bottom\">\n        {rect.map((r) => {\n          const rectClasses = classnames('flex-one', `bg-${r}`);\n          const copy = r.charAt(0).toUpperCase();\n          return (\n            <div key={copy} className={rectClasses}>\n              {copy}\n            </div>\n          );\n        })}\n      </div>{' '}\n      <div className=\"flex\">\n        {buttonsIds.map((b, index) => {\n          const col1 = rect[index];\n          const col2 = rect[index + 1];\n\n          const onClick = () => {\n            const temp = rect[index];\n            const copyRect = clone(rect);\n            copyRect[index] = copyRect[index + 1];\n            copyRect[index + 1] = temp;\n\n            if (isEqual(copyRect, [Red, Orange, Yellow, Green, Blue, Violet])) {\n              setLogs([...logs, 'Perfect rainbow!', 'Congrats! Color green is completed']);\n              setSave({ ...save, green: Progress.Done });\n              setPuzzle(Puzzle.Menu);\n            }\n\n            setRect(copyRect);\n          };\n\n          const copy = `Swap ${col1.charAt(0).toUpperCase()} and ${col2.charAt(0).toUpperCase()}`;\n\n          return (\n            <div onClick={onClick} key={copy} className=\"mini-button flex-one\">\n              {copy}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport { DinoCrisis };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface HexaProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Hexa: React.FC<HexaProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n  const initialClues = ['I am also known as hexactly the following...', 'red 250 green 202 blue 222'];\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Find the 6-letter word', ...initialClues]), []);\n\n  const [code, setCode] = React.useState('');\n\n  const onChangeCode = (e: any) => {\n    const newCode = e.currentTarget.value.toUpperCase();\n\n    if (newCode === 'FACADE') {\n      setLogs([...logs, 'You found the 6-letter word: FACADE', 'Congrats! Color magenta is completed']);\n      setSave({ ...save, magenta: Progress.Done });\n      setPuzzle(Puzzle.Menu);\n    } else if (newCode.length === 0) {\n      setCode(newCode);\n      setLogs([...logs, ...initialClues]);\n    } else if (newCode.length > 6) {\n      setLogs([...logs, 'The word only has 6 letters']);\n    } else if (/^[A-F]+$/.test(newCode)) {\n      setCode(newCode);\n    } else if (/[G-Z]/.test(newCode)) {\n      setLogs([...logs, `6-letter word does not contain letter: ${newCode[newCode.length - 1]}`]);\n    }\n  };\n\n  return (\n    <div className=\"flex-one margin\">\n      <div className=\"flex-one hexa\">Describe me!</div>\n      <input className=\"text-center\" value={code} type=\"text\" onChange={onChangeCode} />\n    </div>\n  );\n};\n\nexport { Hexa };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface KonamiProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Konami: React.FC<KonamiProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const pos = [0, 1, 2];\n\n  const initialPosition = { x: 1, y: 1 };\n  const [position, setPosition] = React.useState(initialPosition);\n  const [sequence, setSequence] = React.useState<Move[]>([]);\n\n  const { Left, Right, Up, Down } = Move;\n\n  const correctSequence = [Up, Up, Down, Down, Left, Right, Left, Right];\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Dance the Konami Sequence']), []);\n\n  const onDance = (move: Move) => {\n    let decaX = 0;\n    let decaY = 0;\n\n    if (move === Left) decaX = -1;\n    else if (move === Right) decaX = 1;\n    else if (move === Up) decaY = -1;\n    else if (move === Down) decaY = 1;\n\n    const newPosX = (position.x + decaX + pos.length) % pos.length;\n    const newPosY = (position.y + decaY + pos.length) % pos.length;\n    setPosition({ x: newPosX, y: newPosY });\n\n    const isValid = correctSequence[sequence.length] === move;\n\n    if (isValid) {\n      const newSequence = [...sequence, move];\n      setSequence(newSequence);\n      const isDone = isEqual(newSequence, correctSequence);\n\n      if (!isDone) setLogs([...logs, `Correct sequence so far: ${newSequence.join(' ')}`]);\n\n      if (isDone) {\n        setLogs([...logs, `Sequence completed: ${newSequence.join(' ')}`, 'Congrats! Color blue is completed']);\n        setSave({ ...save, blue: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      }\n    } else {\n      setSequence([]);\n      setLogs([...logs, `Sequence broken because of ${move}`]);\n    }\n  };\n\n  const renderRow = (y: number) => {\n    return pos.map((p, index) => {\n      const isPos = index === position.x && y === position.y;\n      const copy = isPos ? '+' : '-';\n      const squareClasses = classnames('inline flex-one square', { 'square-pos': isPos });\n      return <div className={squareClasses}>{copy}</div>;\n    });\n  };\n\n  const renderRows = () => {\n    return pos.map((p, index) => {\n      return <div className=\"block flex\">{renderRow(index)}</div>;\n    });\n  };\n\n  return (\n    <>\n      <div className=\"margin-bottom\">{renderRows()}</div>\n      <div onClick={() => onDance(Up)} className=\"mini-button up\">\n        Up\n      </div>\n      <div className=\"block flex\">\n        <div onClick={() => onDance(Left)} className=\"mini-button flex-one left\">\n          Left\n        </div>\n        <div onClick={() => onDance(Right)} className=\"mini-button flex-one right\">\n          Right\n        </div>\n      </div>\n      <div onClick={() => onDance(Down)} className=\"mini-button down\">\n        Down\n      </div>\n    </>\n  );\n};\n\nexport { Konami };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle, Clue } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual, uniq } from 'lodash';\nimport { get4DigitsCode } from '../utils';\n\nexport interface SleepingDogsProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst SleepingDogs: React.FC<SleepingDogsProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const [correctCode] = React.useState(get4DigitsCode());\n  const [code, setCode] = React.useState([0, 0, 0, 0]);\n  const [clues, setClues] = React.useState([Clue.White, Clue.White, Clue.White, Clue.White]);\n\n  React.useEffect(\n    () => setLogs([...logs, 'Objective: Find the correct 4-digit code', `The code uses 4 unique digits`]),\n    []\n  );\n\n  const onValid = () => {\n    const sameDigit = uniq(code).length !== 4;\n\n    if (sameDigit) {\n      setLogs([...logs, 'The code uses 4 unique digits']);\n    } else {\n      if (isEqual(correctCode, code)) {\n        setLogs([...logs, `You found the correct code: ${correctCode.join('')}`, 'Congrats! Color cyan is completed']);\n        setSave({ ...save, cyan: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      } else {\n        const copyClues = clone(clues);\n        code.map((d, index) => {\n          if (correctCode[index] === d) {\n            copyClues[index] = Clue.Green;\n          } else {\n            if (correctCode.includes(d)) {\n              copyClues[index] = Clue.Orange;\n            } else {\n              copyClues[index] = Clue.Red;\n            }\n          }\n        });\n\n        setClues(copyClues);\n\n        setLogs([...logs, 'Invalid digit: red', 'Invalid placement: orange', 'Correct placement: green']);\n      }\n    }\n  };\n\n  const onChange = (i: number, delta: number) => {\n    const newDigit = (10 + (code[i] + delta)) % 10;\n    const copyCode = clone(code);\n    const copyClues = clone(clues);\n\n    copyCode[i] = newDigit;\n    copyClues[i] = Clue.White;\n\n    setCode(copyCode);\n    setClues(copyClues);\n  };\n\n  const renderInput = (index: number) => {\n    const classesDigit = `block ${clues[index]}`;\n\n    return (\n      <div key={index} className=\"inline-block code\">\n        <div onClick={() => onChange(index, 1)} className=\"block button-digit\">\n          ▲\n        </div>\n        <div className={classesDigit}>{code[index]}</div>\n        <div onClick={() => onChange(index, -1)} className=\"block button-digit\">\n          ▼\n        </div>\n      </div>\n    );\n  };\n\n  const renderInputs = () => {\n    return (\n      <div className=\"margin-bottom\">\n        {renderInput(0)}\n        {renderInput(1)}\n        {renderInput(2)}\n        {renderInput(3)}\n      </div>\n    );\n  };\n\n  const renderValidate = () => {\n    return (\n      <div className=\"mini-button margin\" onClick={onValid}>\n        Validate entry\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex-one margin\">\n      {renderInputs()}\n      {renderValidate()}\n    </div>\n  );\n};\n\nexport { SleepingDogs };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface SpyroProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Spyro: React.FC<SpyroProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const [tiles, setTiles] = React.useState([false, true, false, true, true, true, false, true, false]);\n\n  React.useEffect(\n    () => setLogs([...logs, 'Objective: Lit all the tiles', `Clicking a tile toggles its state and its neighbors'`]),\n    []\n  );\n\n  const onChange = (i: number) => {\n    if (i === 4) return;\n\n    const copyTiles = clone(tiles);\n\n    copyTiles[i] = !copyTiles[i];\n\n    if (i === 0) {\n      copyTiles[1] = !copyTiles[1];\n      copyTiles[3] = !copyTiles[3];\n    } else if (i === 1) {\n      copyTiles[0] = !copyTiles[0];\n      copyTiles[2] = !copyTiles[2];\n    } else if (i === 2) {\n      copyTiles[1] = !copyTiles[1];\n      copyTiles[5] = !copyTiles[5];\n    } else if (i === 3) {\n      copyTiles[0] = !copyTiles[0];\n      copyTiles[6] = !copyTiles[6];\n    } else if (i === 5) {\n      copyTiles[2] = !copyTiles[2];\n      copyTiles[8] = !copyTiles[8];\n    } else if (i === 6) {\n      copyTiles[3] = !copyTiles[3];\n      copyTiles[7] = !copyTiles[7];\n    } else if (i === 7) {\n      copyTiles[6] = !copyTiles[6];\n      copyTiles[8] = !copyTiles[8];\n    } else if (i === 8) {\n      copyTiles[5] = !copyTiles[5];\n      copyTiles[7] = !copyTiles[7];\n    }\n\n    setTiles(copyTiles);\n\n    if (!copyTiles.some((t) => t === false)) {\n      setLogs([...logs, 'All tiles are lit', 'Congrats! Color yellow is completed']);\n      setSave({ ...save, yellow: Progress.Done });\n      setPuzzle(Puzzle.Menu);\n    }\n  };\n\n  const renderRow = (rowIndexes: number[]) => {\n    return (\n      <div className=\"block flex\">\n        {rowIndexes.map((i, index) => {\n          const tile = tiles[i];\n          const isExistingTile = i !== 4;\n          const squareClasses = classnames('inline flex-one', {\n            'bg-white': isExistingTile && !tile,\n            'bg-black': !isExistingTile,\n            'bg-yellow': isExistingTile && tile,\n            tile: isExistingTile\n          });\n          return (\n            <div onClick={() => onChange(i)} key={index} className={squareClasses}>\n              {' '}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderTiles = () => {\n    return (\n      <div className=\"margin-bottom tiles\">\n        {renderRow([0, 1, 2])}\n        {renderRow([3, 4, 5])}\n        {renderRow([6, 7, 8])}\n      </div>\n    );\n  };\n\n  return <div className=\"flex-one margin\">{renderTiles()}</div>;\n};\n\nexport { Spyro };\n","import * as React from 'react';\nimport { Save, Progress, RainbowColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { getPlural, getRandomInt, getRoomColor, getRupees, getRupeesColor } from '../utils';\nimport { RUPEES_INITIAL_COUNT } from '../constants';\n\nexport interface ZeldaProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Zelda: React.FC<ZeldaProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  React.useEffect(\n    () =>\n      setLogs([\n        ...logs,\n        'Objective: Collect 50 Rupees',\n        'One chest has a key to next room, the other has rupees',\n        `You currently have ${RUPEES_INITIAL_COUNT} rupee. You are in room 1`,\n        `Pick a chest`\n      ]),\n    []\n  );\n\n  const openChest = () => {\n    const result = room === 6 ? 0 : getRandomInt(2);\n\n    if (result === 1) {\n      const newRoom = room + 1;\n      setLogs([...logs, `Chest had the key! You enter room ${newRoom}`]);\n      setRoom(newRoom);\n    } else {\n      const deltaRupees = getRupees(room);\n      const newRupees = rupees + deltaRupees;\n\n      const chestMsg = `Chest had ${deltaRupees} ${getPlural('rupee', deltaRupees)}, ${getRupeesColor(\n        deltaRupees\n      )} rupee`;\n      if (newRupees >= 50) {\n        setLogs([...logs, chestMsg, `50+ rupees collected`, 'Congrats! Color red is completed']);\n        setSave({ ...save, red: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      } else if (newRupees < 0) {\n        setLogs([...logs, chestMsg, `You wasted all your rupees`, 'Game Over, start again']);\n        setPuzzle(Puzzle.Menu);\n      } else {\n        setLogs([\n          ...logs,\n          chestMsg,\n          `You go back to room 1 and now have ${newRupees} ${getPlural('rupee', newRupees)}`\n        ]);\n        setRoom(1);\n        setRupees(newRupees);\n      }\n    }\n  };\n\n  const [rupees, setRupees] = React.useState(RUPEES_INITIAL_COUNT);\n  const [room, setRoom] = React.useState(1);\n\n  const classesRoom = classnames(`room flex bg-${getRoomColor(room)}`);\n\n  if (room === 6)\n    return (\n      <div className={classesRoom}>\n        <div onClick={openChest} className=\"flex-one chest\">\n          Final Chest\n        </div>\n      </div>\n    );\n\n  return (\n    <div className={classesRoom}>\n      <div onClick={openChest} className=\"flex-one chest\">\n        Chest 1\n      </div>\n      <div onClick={openChest} className=\"flex-one chest\">\n        Chest 2\n      </div>\n    </div>\n  );\n};\n\nexport { Zelda };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\n\nexport interface ConfettisProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Confettis: React.FC<ConfettisProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n  const { width, height } = useWindowSize();\n\n  React.useEffect(() => setSave({ ...save, black: Progress.Done }), []);\n\n  return (\n    <div className=\"flex-one margin\">\n      <Confetti width={width} height={height} />\n      <div className=\"flex-one\">Congrats Faithy!</div>\n      <div className=\"flex-one\">You completed Coolr!</div>\n      <div className=\"flex-one\">Reward: coupon for the PS4/PS5 mystery game of your choice!</div>\n      <div className=\"flex-one\">Contact Sebi for additional details!</div>\n    </div>\n  );\n};\n\nexport { Confettis };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle, Color } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\nimport { getNextColorGuess } from '../utils';\n\nexport interface CreditsProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Credits: React.FC<CreditsProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n  const initialClues = ['Coolr puzzles were inspired by actual video games'];\n\n  React.useEffect(\n    () => setLogs([...logs, 'Objective: Match each video title with its puzzle color', ...initialClues]),\n    []\n  );\n\n  const { Cyan, Yellow, Magenta, Blue, Green, Red } = Color;\n  const [guesses, setGuesses] = React.useState([Green, Green, Green, Green, Green, Green]);\n  const correctGuesses = [Cyan, Yellow, Magenta, Blue, Green, Red];\n\n  const onClick = (index: number) => {\n    const newGuesses = clone(guesses);\n\n    newGuesses[index] = getNextColorGuess(guesses[index]);\n\n    if (isEqual(newGuesses, correctGuesses)) {\n      setLogs([...logs, 'You completed Coolr credits by matching the videos', 'Congrats! Color white is completed']);\n      setSave({ ...save, white: Progress.Done });\n      setPuzzle(Puzzle.Menu);\n    } else {\n      setGuesses(newGuesses);\n    }\n  };\n\n  return (\n    <div className=\"margin\">\n      <div>\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/EnG7jxtJn6o\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/n8R9J__3ozc\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/RyaqHNdsqxw\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n      </div>\n      <div>\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/MkSYX0N07CQ\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/XTZ4QwLhZSc\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n        <iframe\n          className=\"flex-one\"\n          width=\"180\"\n          src=\"https://www.youtube.com/embed/q8bynLcL8lI\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        />\n      </div>\n      <div>\n        <div className={`clickable-title ${guesses[0]}`} onClick={() => onClick(0)}>\n          How to Hack Security Cameras in Sleeping Dogs\n        </div>\n        <div className={`clickable-title ${guesses[1]}`} onClick={() => onClick(1)}>\n          All puzzles in Idol Springs Spyro\n        </div>\n        <div className={`clickable-title ${guesses[2]}`} onClick={() => onClick(2)}>\n          How to Actually Win Facade\n        </div>\n        <div className={`clickable-title ${guesses[3]}`} onClick={() => onClick(3)}>\n          The Konami Code | Gaming Historian\n        </div>\n        <div className={`clickable-title ${guesses[4]}`} onClick={() => onClick(4)}>\n          OoT Treasure Chest Game 2nd Try No Lens\n        </div>\n        <div className={`clickable-title ${guesses[5]}`} onClick={() => onClick(5)}>\n          Dino Crisis 1 -= Batteries Puzzle =-\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Credits };\n","import * as React from 'react';\nimport { IoIosConstruct } from 'react-icons/io';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { isMobile } from 'react-device-detect';\nimport { Color, Mode, Progress, Puzzle } from './types';\nimport { PuzzleSelection } from './components/PuzzleSelection';\nimport { Notes } from './components/Notes';\nimport { DinoCrisis } from './components/DinoCrisis';\nimport { Hexa } from './components/Hexa';\nimport { Konami } from './components/Konami';\nimport { SleepingDogs } from './components/SleepingDogs';\nimport { Spyro } from './components/Spyro';\nimport { Zelda } from './components/Zelda';\nimport { Confettis } from './components/Confettis';\nimport { Credits } from './components/Credits';\n\nimport classnames from 'classnames';\nimport {\n  getDefaultSave,\n  getPuzzleColor,\n  getPuzzleText,\n  getLevelsText,\n  canMix2,\n  getNewLevelsMix2,\n  getResultLevelMix2,\n  getResultLevelMix3,\n  getColorBackgroundPuzzle,\n  canMix3,\n  getNewLevelsMix3,\n  isValidCode,\n  getColorPuzzle,\n  getCodesInvalidMsg\n} from './utils';\nimport {\n  CODE_WHITE,\n  CODE_BLUE,\n  CODE_CYAN,\n  CODE_GREEN,\n  CODE_LENGTH,\n  CODE_MAGENTA,\n  CODE_RED,\n  CODE_YELLOW\n} from './constants';\n\nconst App = () => {\n  const [mode, setMode] = React.useState(Mode.Additive);\n  const [logs, setLogs] = React.useState([\n    'Welcome to Coolr',\n    'This is a puzzle game',\n    'If you refresh the page, you lose progress',\n    `Make sure to write down any ${CODE_LENGTH}-letter cheat code`\n  ]);\n\n  const [code, setCode] = React.useState('');\n  const [save, setSave] = React.useState(getDefaultSave());\n  const [levels, setLevels] = React.useState<Color[]>([]);\n  const [level, setLevel] = React.useState<Color | undefined>();\n  // TODO: change\n  const [puzzle, setPuzzle] = React.useState(Puzzle.Credits);\n\n  const onRejectLevel = (level: Color) => () => {\n    const floorIndex = mode === Mode.Additive ? 1 : 2;\n    const isBlackInaccessible = level === Color.Black && mode === Mode.Additive;\n    const isWhiteInaccessible = level === Color.White && mode === Mode.Subtractive;\n\n    const isInaccessible = isBlackInaccessible || isWhiteInaccessible;\n    if (isInaccessible) {\n      setLogs([...logs, `${level} cannot be accessed in ${mode} mixing`]);\n    } else {\n      setLogs([...logs, `Mix colors from floor ${floorIndex} to access color ${level}`]);\n    }\n  };\n\n  const toggleMode = () => {\n    const newMode = mode === Mode.Additive ? Mode.Subtractive : Mode.Additive;\n    setMode(newMode);\n\n    const levelsText = getLevelsText([], newMode);\n    setLogs([...logs, `You are now using ${newMode} mixing!`, levelsText]);\n    setLevel(undefined);\n    setLevels([]);\n  };\n\n  const onChangeCode = (e: any) => {\n    const newCode = e.currentTarget.value.toUpperCase();\n\n    if (!newCode || /^[A-Z]+$/.test(newCode)) {\n      if (newCode.length <= CODE_LENGTH) {\n        setCode(newCode);\n\n        if (newCode.length === CODE_LENGTH) {\n          const msgInvalid = `Failure: cheat code ${newCode} is invalid`;\n\n          if (isValidCode(newCode)) {\n            const newLogs = [...logs, `Success: cheat code ${newCode} is valid`, 'Save has been loaded'];\n            const floor1 = { red: Progress.Done, green: Progress.Done, blue: Progress.Done };\n            const floor2 = { cyan: Progress.Done, magenta: Progress.Done, yellow: Progress.Done };\n\n            if (newCode === CODE_RED) {\n              setSave({ ...save, red: Progress.Done });\n              newLogs.push('Color red is completed');\n            } else if (newCode === CODE_GREEN) {\n              setSave({ ...save, green: Progress.Done });\n              newLogs.push('Color green is completed');\n            } else if (newCode === CODE_BLUE) {\n              setSave({ ...save, blue: Progress.Done });\n              newLogs.push('Color blue is completed');\n            } else if (newCode === CODE_CYAN) {\n              setSave({ ...save, ...floor1, cyan: Progress.Done });\n              newLogs.push('Colors red green blue cyan are completed');\n            } else if (newCode === CODE_MAGENTA) {\n              setSave({ ...save, ...floor1, magenta: Progress.Done });\n              newLogs.push('Colors red green blue magenta are completed');\n            } else if (newCode === CODE_YELLOW) {\n              setSave({ ...save, ...floor1, yellow: Progress.Done });\n              newLogs.push('Colors red green blue yellow are completed');\n            } else if (newCode === CODE_WHITE) {\n              setSave({ ...save, ...floor1, ...floor2, white: Progress.Done });\n              newLogs.push('Colors red green blue cyan magenta yellow white are completed');\n            }\n\n            setLogs(newLogs);\n            setPuzzle(Puzzle.Menu);\n          } else if (newCode.length === CODE_LENGTH) {\n            const additionalMsgInvalid = getCodesInvalidMsg(newCode);\n            const logsInvalid = additionalMsgInvalid\n              ? [...logs, msgInvalid, additionalMsgInvalid]\n              : [...logs, msgInvalid];\n\n            setLogs(logsInvalid);\n          }\n        }\n      }\n    }\n  };\n\n  const onSelectLevel = (level: Color) => () => {\n    let newLevels: Color[] = [];\n    let additionalLogs = [];\n\n    if (!canMix2(save)) {\n      const hasLevel = levels.includes(level);\n      newLevels = hasLevel ? [] : [level];\n\n      setLevel(newLevels[0]);\n      setLevels(newLevels);\n    } else if (canMix3(save)) {\n      newLevels = getNewLevelsMix3(levels, level);\n      setLevels(newLevels);\n\n      if (newLevels.length === 3) {\n        const resultLevelMix3 = getResultLevelMix3(newLevels, mode);\n\n        setLevel(resultLevelMix3);\n        const levelSave = resultLevelMix3;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length === 2) {\n        const resultLevelMix2 = getResultLevelMix2(newLevels, mode);\n\n        setLevel(resultLevelMix2);\n        const levelSave = resultLevelMix2;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length < 2) {\n        setLevel(newLevels[0]);\n      }\n    } else if (canMix2(save)) {\n      newLevels = getNewLevelsMix2(levels, level);\n      setLevels(newLevels);\n\n      if (newLevels.length === 2) {\n        const resultLevelMix2 = getResultLevelMix2(newLevels, mode);\n\n        setLevel(resultLevelMix2);\n        const levelSave = resultLevelMix2;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length < 2) {\n        setLevel(newLevels[0]);\n      }\n    }\n\n    const levelsText = getLevelsText(newLevels, mode);\n    additionalLogs.push(levelsText);\n    setLogs([...logs, ...additionalLogs]);\n  };\n\n  if (isMobile) {\n    return (\n      <HelmetProvider>\n        <Helmet>\n          <title>Coolr</title>\n          <link rel=\"canonical\" href=\"https://sebranly.github.io/coolr\" />\n        </Helmet>\n        <div className=\"mobile\">\n          <h1>Coolr</h1>\n          <h2>Puzzle Game</h2>\n          <div className=\"margin\">\n            This puzzle game is not accessible on mobile. Please visit it on a computer instead. Thank you for your\n            understanding!\n          </div>\n        </div>\n        <br />\n        <IoIosConstruct className=\"icon-mobile\" size=\"100px\" />\n      </HelmetProvider>\n    );\n  }\n\n  const renderSubheader = () => {\n    const subheader = getPuzzleText(puzzle);\n    const colorClass = getColorPuzzle(puzzle);\n    const backgroundColorClass = getColorBackgroundPuzzle(puzzle);\n\n    return (\n      <h2 className=\"italic\">\n        <div className={`inline ${colorClass} bg-${backgroundColorClass}`}>{subheader.charAt(0)}</div>\n        {subheader.substring(1)}\n      </h2>\n    );\n  };\n\n  const classesMixing = classnames('button', {\n    additive: mode === Mode.Additive,\n    subtractive: mode === Mode.Subtractive\n  });\n\n  return (\n    <HelmetProvider>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        data-cross-origin=\"anonymous\"\n      />\n      <Helmet>\n        <title>Coolr</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/coolr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">Coolr</h1>\n        {renderSubheader()}\n\n        <div className=\"flex\">\n          <div className=\"flex-one margin\">\n            {puzzle === Puzzle.Menu && (\n              <>\n                <PuzzleSelection\n                  levels={levels}\n                  mode={mode}\n                  onRejectLevel={onRejectLevel}\n                  onSelectLevel={onSelectLevel}\n                  save={save}\n                />\n                {level && (\n                  <div onClick={() => setPuzzle(getPuzzleColor(level))} className=\"button\">\n                    Enter color\n                    <div className={classnames('inline', level)}>{` ${level}`}</div>\n                  </div>\n                )}\n              </>\n            )}\n            {puzzle === Puzzle.Confettis && (\n              <Confettis logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Credits && (\n              <Credits logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.DinoCrisis && (\n              <DinoCrisis logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Hexa && (\n              <Hexa logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Konami && (\n              <Konami logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.SleepingDogs && (\n              <SleepingDogs logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Spyro && (\n              <Spyro logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Zelda && (\n              <Zelda logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle !== Puzzle.Menu && (\n              <div onClick={() => setPuzzle(Puzzle.Menu)} className=\"button\">\n                Back to menu\n              </div>\n            )}\n          </div>\n          {puzzle !== Puzzle.Confettis && (\n            <div className=\"flex-one margin\">\n              <Notes puzzle={puzzle} logs={logs} save={save} />\n              {puzzle === Puzzle.Menu && <br />}\n              {puzzle === Puzzle.Menu && (\n                <input className=\"text-center\" value={code} type=\"text\" onChange={onChangeCode} />\n              )}\n              {save.white === Progress.Done && puzzle === Puzzle.Menu && (\n                <div className={classesMixing} onClick={toggleMode}>\n                  Toggle Mixing\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}