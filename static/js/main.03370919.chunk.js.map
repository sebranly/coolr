{"version":3,"sources":["types.ts","components/ColorDot.tsx","constants.ts","utils/index.ts","components/PuzzleSelection.tsx","components/Notes.tsx","components/DinoCrisis.tsx","components/Hexa.tsx","components/Konami.tsx","components/SleepingDogs.tsx","components/Spyro.tsx","components/Zelda.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","Progress","Puzzle","RainbowColor","RupeeColor","Move","Clue","ColorDot","props","className","color","levels","miniSave","onRejectLevel","onSelectLevel","initial","charAt","toUpperCase","isDone","Done","isSelected","includes","classColor","classes","classnames","selected","onClick","MIX_ONE_COLOR_MSG","MIX_TWO_COLORS_MSG","MIX_THREE_COLORS_MSG","VALID_CODES","getPlural","str","count","canMix2","save","red","green","blue","canMix3","magenta","yellow","cyan","getResultLevelMix2","length","Red","Green","Blue","Cyan","Magenta","Yellow","getResultLevelMix3","White","getRandomInt","max","Math","floor","random","getCodes","codes","push","PuzzleSelection","Hidden","white","hasLevel2","hasLevel3","Notes","logs","puzzle","powerLogs","codeMsg","commonLogsTemp","commonLogs","join","getPowerLogs","reversedLogs","reverse","slice","hasPowerLogs","map","log","index","key","split","word","additionalClass","Object","values","italicClass","codeClass","toLowerCase","successClass","failureClass","objectiveClass","renderLog","Menu","renderPowerLog","DinoCrisis","setSave","setPuzzle","setLogs","Orange","Violet","React","rect","setRect","r","rectClasses","copy","b","col1","col2","temp","copyRect","clone","isEqual","Hexa","initialClues","code","setCode","value","type","onChange","e","newCode","currentTarget","test","Konami","pos","x","y","position","setPosition","sequence","setSequence","Left","Right","Up","Down","correctSequence","onDance","move","decaX","decaY","newPosX","newPosY","newSequence","p","isPos","squareClasses","SleepingDogs","newDigit","get4DigitsCode","correctCode","clues","setClues","onValid","uniq","copyClues","d","i","delta","copyCode","renderInput","classesDigit","Spyro","tiles","setTiles","renderRow","rowIndexes","tile","isExistingTile","copyTiles","some","t","Zelda","openChest","room","newRoom","setRoom","deltaRupees","getRupees","newRupees","rupees","chestMsg","Purple","getRupeesColor","setRupees","classesRoom","getRoomColor","App","Available","getDefaultSave","setLevels","level","setLevel","isMobile","rel","href","size","integrity","data-cross-origin","subheader","getPuzzleText","colorClass","getColorPuzzle","substring","renderSubheader","newLevels","additionalLogs","hasLevel","filter","l","getNewLevelsMix3","resultLevelMix3","levelSave","resultLevelMix2","getNewLevelsMix2","levelsText","mix","getLevelsText","getPuzzleColor","msgInvalid","isValidCode","newLogs","floor1","additionalMsgInvalid","getCodesInvalidMsg","logsInvalid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03370919.chunk.js","sourcesContent":["export enum Color {\n  Red = 'red',\n  Green = 'green',\n  Blue = 'blue',\n  Cyan = 'cyan',\n  Magenta = 'magenta',\n  Yellow = 'yellow',\n  White = 'white'\n}\n\nexport enum Progress {\n  Hidden = 'hidden',\n  Available = 'available',\n  Done = 'done'\n}\n\nexport interface Save {\n  red: Progress;\n  green: Progress;\n  blue: Progress;\n  cyan: Progress;\n  magenta: Progress;\n  yellow: Progress;\n  white: Progress;\n}\n\nexport enum Puzzle {\n  DinoCrisis = 'dinoCrisis',\n  Hexa = 'hexa',\n  Konami = 'konami',\n  Menu = 'menu',\n  SleepingDogs = 'sleepingDogs',\n  Spyro = 'spyro',\n  Zelda = 'zelda'\n}\n\nexport enum RainbowColor {\n  Red = 'red',\n  Orange = 'orange',\n  Yellow = 'yellow',\n  Green = 'green',\n  Blue = 'blue',\n  Violet = 'violet'\n}\n\nexport enum RupeeColor {\n  Red = 'red',\n  Green = 'green',\n  Blue = 'blue',\n  Purple = 'purple'\n}\n\nexport enum Move {\n  Left = 'left',\n  Right = 'right',\n  Up = 'up',\n  Down = 'down'\n}\n\nexport enum Clue {\n  Green = 'green',\n  Orange = 'orange',\n  Red = 'red',\n  White = 'white'\n}\n","import * as React from 'react';\nimport { Color, Progress } from '../types';\nimport classnames from 'classnames';\n\nexport interface ColorDotProps {\n  className?: string;\n  onRejectLevel?: () => void;\n  onSelectLevel?: () => void;\n  levels: Color[];\n  color: Color;\n  miniSave: Progress;\n}\n\nconst ColorDot: React.FC<ColorDotProps> = (props) => {\n  const { className, color, levels, miniSave, onRejectLevel, onSelectLevel } = props;\n  const initial = color.charAt(0).toUpperCase();\n  const isDone = miniSave === Progress.Done;\n  const isSelected = levels.includes(color);\n\n  const classColor = `bg-${color}`;\n  const classes = classnames('circle inline-block', classColor, className, { selected: isSelected });\n\n  return (\n    <div className=\"inline dot\">\n      {isDone && (\n        <span className=\"checkmark\">\n          <div className=\"checkmark_circle\"></div>\n          <div className=\"checkmark_stem\"></div>\n          <div className=\"checkmark_kick\"></div>\n        </span>\n      )}\n      <div className={classes} onClick={onSelectLevel ?? onRejectLevel}>\n        <span className=\"initial\">{initial}</span>\n      </div>\n    </div>\n  );\n};\n\nexport { ColorDot };\n","export const CODE_LENGTH = 6;\nexport const MIX_ONE_COLOR_MSG = 'You can select a color!';\nexport const MIX_TWO_COLORS_MSG = 'You completed floor 1! You can mix 2 colors!';\nexport const MIX_THREE_COLORS_MSG = 'You completed both floor 1 and floor 2! You can mix 3 colors!';\nexport const RUPEES_INITIAL_COUNT = 1;\nexport const CODE_RED = 'BEDBAD';\nexport const CODE_BLUE = 'DABBED';\nexport const CODE_GREEN = 'DADDAD';\nexport const CODE_CYAN = 'BACFED';\nexport const CODE_MAGENTA = 'FACADE';\nexport const CODE_YELLOW = 'DECADE';\nexport const VALID_CODES = [CODE_RED, CODE_GREEN, CODE_BLUE, CODE_CYAN, CODE_MAGENTA, CODE_YELLOW];\n","import {\n  CODE_RED,\n  CODE_BLUE,\n  CODE_GREEN,\n  CODE_CYAN,\n  CODE_LENGTH,\n  CODE_MAGENTA,\n  CODE_YELLOW,\n  MIX_ONE_COLOR_MSG,\n  MIX_THREE_COLORS_MSG,\n  MIX_TWO_COLORS_MSG,\n  VALID_CODES\n} from '../constants';\nimport { Color, Progress, Save, Puzzle, RupeeColor } from '../types';\n\nconst getPlural = (str: string, count: number) => {\n  if (count === 1) return str;\n  return `${str}s`;\n};\n\nconst getDefaultSave = () => {\n  const { Available, Hidden, Done } = Progress;\n\n  // TODO: change\n  const defaultSave: Save = {\n    red: Available,\n    green: Available,\n    blue: Available,\n    cyan: Hidden,\n    magenta: Hidden,\n    yellow: Hidden,\n    white: Hidden\n  };\n\n  return defaultSave;\n};\n\nconst canMix2 = (save: Save) => {\n  const { Done } = Progress;\n\n  const { red, green, blue } = save;\n\n  const redDone = red === Done;\n  const greenDone = green === Done;\n  const blueDone = blue === Done;\n\n  return redDone && greenDone && blueDone;\n};\n\nconst canMix3 = (save: Save) => {\n  const { Done } = Progress;\n\n  const { red, green, blue, magenta, yellow, cyan } = save;\n\n  const redDone = red === Done;\n  const greenDone = green === Done;\n  const blueDone = blue === Done;\n  const magentaDone = magenta === Done;\n  const yellowDone = yellow === Done;\n  const cyanDone = cyan === Done;\n\n  return redDone && greenDone && blueDone && magentaDone && yellowDone && cyanDone;\n};\n\nconst hasLevel2 = (save: Save) => {\n  const { Hidden } = Progress;\n  const { cyan, magenta, yellow } = save;\n\n  return !(cyan === Hidden && magenta === Hidden && yellow === Hidden);\n};\n\nconst hasLevel3 = (save: Save) => {\n  const { Hidden } = Progress;\n  const { white } = save;\n\n  return white !== Hidden;\n};\n\nconst getNewLevelsMix2 = (levels: Color[], level: Color) => {\n  const hasLevel = levels.includes(level);\n\n  if (levels.length === 0) return [level];\n  if (levels.length === 1) {\n    return hasLevel ? [] : [...levels, level];\n  }\n\n  return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0]];\n};\n\nconst getNewLevelsMix3 = (levels: Color[], level: Color) => {\n  const hasLevel = levels.includes(level);\n\n  if (levels.length === 0) return [level];\n  if (levels.length === 1) {\n    return hasLevel ? [] : [...levels, level];\n  } else if (levels.length === 2) {\n    return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0], levels[1]];\n  }\n\n  return hasLevel ? levels.filter((l) => l !== level) : [level, levels[0]];\n};\n\nconst getLevelsText = (levels: Color[]) => {\n  if (levels.length === 0) return 'No color selected';\n  if (levels.length === 1) return `Color ${levels[0]} is selected`;\n\n  const mix = levels.length === 2 ? getResultLevelMix2(levels) : getResultLevelMix3(levels);\n\n  return `Colors ${levels.join(' ')} are selected: mix is ${mix}`;\n};\n\nconst getResultLevelMix2 = (levels: Color[]) => {\n  if (levels.length !== 2) return undefined;\n\n  const { Red, Green, Blue, Cyan, Magenta, Yellow } = Color;\n\n  if (levels.includes(Red) && levels.includes(Green)) return Yellow;\n  if (levels.includes(Green) && levels.includes(Blue)) return Cyan;\n  if (levels.includes(Red) && levels.includes(Blue)) return Magenta;\n\n  return undefined;\n};\n\nconst getResultLevelMix3 = (levels: Color[]) => {\n  if (levels.length !== 3) return undefined;\n\n  const { Red, Green, Blue, White } = Color;\n\n  if (levels.includes(Red) && levels.includes(Green) && levels.includes(Blue)) return White;\n\n  return undefined;\n};\n\nconst getPowerLogs = (save: Save) => {\n  const currentCode = '';\n  const codeMsg = `Or type a ${CODE_LENGTH}-letter cheat code below to load a save`;\n  const codes = getCodes(save);\n  const commonLogsTemp = [currentCode, codeMsg];\n  const commonLogs =\n    codes.length > 0 ? [...commonLogsTemp, `Unlocked cheat code(s): ${codes.join(' ')}`] : commonLogsTemp;\n\n  if (canMix3(save)) return [MIX_THREE_COLORS_MSG, ...commonLogs];\n  if (canMix2(save)) return [MIX_TWO_COLORS_MSG, ...commonLogs];\n\n  return [MIX_ONE_COLOR_MSG, ...commonLogs];\n};\n\nconst getRoomColor = (room: number) => {\n  if (room < 3) return Color.Green;\n  if (room < 5) return Color.Blue;\n  if (room === 5) return Color.Red;\n\n  return Color.Yellow;\n};\n\nconst getRandomInt = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst getRupees = (room: number) => {\n  if (room < 3) return 1;\n  if (room < 5) return 5;\n  if (room === 5) return 20;\n\n  return 50;\n};\n\nconst getRupeesColor = (rupees: number) => {\n  if (rupees === 1) return RupeeColor.Green;\n  if (rupees === 5) return RupeeColor.Blue;\n  if (rupees === 20) return RupeeColor.Red;\n  if (rupees === 50) return RupeeColor.Purple;\n};\n\nconst get4DigitsCode = () => {\n  const code: number[] = [];\n\n  while (code.length !== 4) {\n    let newDigit = getRandomInt(10);\n\n    while (code.includes(newDigit)) {\n      newDigit = getRandomInt(10);\n    }\n\n    code.push(newDigit);\n  }\n\n  return code;\n};\n\nconst getCodesInvalidMsg = (code: string) => {\n  if (code === 'BIATCH') return `Also, that's not nice. You think you're Snoop Dogg?`;\n  if (code === 'CHRIST') return `Nobody is coming to save you on this puzzle game`;\n  if (code === 'COLORS') return `Just play the game, you'll see lots of colors :)`;\n  if (code === 'FAITHY') return 'Nice try though Faithychouchou, hehe';\n  if (code === 'FRANCE') return `Tant pis, c'est la vie !`;\n  if (['FLOWER', 'NATURE'].includes(code)) return `If you find this game too hard, maybe have a break?`;\n  if (code === 'HELPME') return `No thank you, I don't want to help you`;\n  if (code === 'KONAMI') return `I'll give you a clue though: blue is Konami Code`;\n  if (code === 'LOSING') return `You are not losing, you are just not even trying`;\n  if (code === 'MAKEUP') return `Stop making up cheat codes!`;\n  if (code === 'PELLAS') return `Nice try but that would be too easy`;\n  if (code === 'PLEASE') return `Just play the game. Please and thank you!`;\n  if (code === 'POWERS') return `You have some powers, but apparently guessing cheat codes is not one of them`;\n  if (code === 'PUZZLE') return `You look puzzled though, that's too bad`;\n  if (code === 'RANDOM') return `Maybe stop trying to guess cheat codes randomly?`;\n  if (['DRAGON', 'YELLOW'].includes(code)) return `A clue though: yellow is from Spyro 2, Idol Springs`;\n  if (code === 'THANKS') return `I didn't load any save, but ok you're welcome I guess?`;\n\n  return '';\n};\n\nconst getColorPuzzle = (puzzle: Puzzle) => {\n  const { Red, Green, Blue, Magenta, Yellow, Cyan, White } = Color;\n  const { Menu, DinoCrisis, Hexa, Konami, Zelda, SleepingDogs, Spyro } = Puzzle;\n\n  switch (puzzle) {\n    case Konami:\n      return Blue;\n    case DinoCrisis:\n      return Green;\n    case Hexa:\n      return Magenta;\n    case Zelda:\n      return Red;\n    case Spyro:\n      return Yellow;\n    case SleepingDogs:\n      return Cyan;\n    default:\n      return White;\n  }\n};\n\nconst getPuzzleColor = (level: Color) => {\n  const { Red, Green, Blue, Magenta, Yellow, Cyan, White } = Color;\n  const { Menu, DinoCrisis, Hexa, Konami, Zelda, SleepingDogs, Spyro } = Puzzle;\n\n  switch (level) {\n    case Blue:\n      return Konami;\n    case Green:\n      return DinoCrisis;\n    case Magenta:\n      return Hexa;\n    case Red:\n      return Zelda;\n    case Yellow:\n      return Spyro;\n    case Cyan:\n      return SleepingDogs;\n    default:\n      return Menu;\n  }\n};\n\nconst getPuzzleText = (puzzle: Puzzle) => {\n  const { Menu, DinoCrisis, Hexa, Konami, SleepingDogs, Spyro, Zelda } = Puzzle;\n\n  switch (puzzle) {\n    case Menu:\n      return 'Menu';\n    case DinoCrisis:\n      return 'Gay Pride';\n    case Hexa:\n      return 'Mathematical Base';\n    case Konami:\n      return 'Be like Konami';\n    case SleepingDogs:\n      return 'Code';\n    case Spyro:\n      return 'Year of the Rabbit';\n    case Zelda:\n      return 'Random Chest';\n    default:\n      return 'Puzzle';\n  }\n};\n\nconst isValidCode = (code: string) => {\n  return VALID_CODES.includes(code);\n};\n\nconst getCodes = (save: Save) => {\n  const codes: string[] = [];\n\n  const { red, green, blue, cyan, magenta, yellow } = save;\n  const { Done } = Progress;\n\n  if (cyan === Done || magenta === Done || yellow === Done) {\n    if (cyan === Done) codes.push(CODE_CYAN);\n    if (magenta === Done) codes.push(CODE_MAGENTA);\n    if (yellow === Done) codes.push(CODE_YELLOW);\n\n    return codes;\n  }\n\n  if (red === Done || green === Done || blue === Done) {\n    if (red === Done) codes.push(CODE_RED);\n    if (green === Done) codes.push(CODE_GREEN);\n    if (blue === Done) codes.push(CODE_BLUE);\n\n    return codes;\n  }\n\n  return codes;\n};\n\nexport {\n  getColorPuzzle,\n  getCodes,\n  getCodesInvalidMsg,\n  getPlural,\n  getRandomInt,\n  getResultLevelMix2,\n  getResultLevelMix3,\n  canMix2,\n  canMix3,\n  getDefaultSave,\n  hasLevel2,\n  hasLevel3,\n  getLevelsText,\n  getNewLevelsMix2,\n  getNewLevelsMix3,\n  getPowerLogs,\n  getPuzzleText,\n  getPuzzleColor,\n  getRoomColor,\n  getRupees,\n  getRupeesColor,\n  get4DigitsCode,\n  isValidCode\n};\n","import * as React from 'react';\nimport { Color } from '../types';\nimport classnames from 'classnames';\nimport { ColorDot } from './ColorDot';\nimport { Progress, Save } from '../types';\nimport { hasLevel2, hasLevel3 } from '../utils';\n\nexport interface PuzzleSelectionProps {\n  className?: string;\n  levels: Color[];\n  onRejectLevel: (level: Color) => () => void;\n  onSelectLevel: (level: Color) => () => void;\n  save: Save;\n}\n\nconst PuzzleSelection: React.FC<PuzzleSelectionProps> = (props) => {\n  const { className, save, levels, onRejectLevel, onSelectLevel } = props;\n  const { Hidden } = Progress;\n  const { Red, Green, Blue, Magenta, Cyan, Yellow, White } = Color;\n  const { red, green, blue, magenta, cyan, yellow, white } = save;\n\n  const renderLevel2 = () => {\n    const hasLvl2 = hasLevel2(save);\n\n    if (!hasLvl2) return null;\n\n    return (\n      <>\n        <br />\n        <h2>Floor 2</h2>\n        <div className=\"block\">\n          {cyan !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Cyan}\n              levels={levels}\n              onRejectLevel={onRejectLevel(Cyan)}\n              miniSave={save.cyan}\n            />\n          )}\n          {magenta !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Magenta}\n              levels={levels}\n              onRejectLevel={onRejectLevel(Magenta)}\n              miniSave={save.magenta}\n            />\n          )}\n          {yellow !== Hidden && (\n            <ColorDot\n              className=\"black\"\n              color={Yellow}\n              levels={levels}\n              onRejectLevel={onRejectLevel(Yellow)}\n              miniSave={save.yellow}\n            />\n          )}\n        </div>\n      </>\n    );\n  };\n\n  const renderLevel3 = () => {\n    const hasLvl3 = hasLevel3(save);\n\n    if (!hasLvl3) return null;\n\n    return (\n      <>\n        <br />\n        <h2>Floor 3</h2>\n        <div className=\"block\">\n          <ColorDot\n            className=\"black\"\n            color={White}\n            levels={levels}\n            onRejectLevel={onRejectLevel(White)}\n            miniSave={save.white}\n          />\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <h2>Floor 1</h2>\n      <div className=\"block\">\n        <ColorDot\n          className=\"black\"\n          color={Red}\n          levels={levels}\n          onSelectLevel={onSelectLevel(Red)}\n          miniSave={save.red}\n        />\n        <ColorDot\n          className=\"black\"\n          color={Green}\n          levels={levels}\n          onSelectLevel={onSelectLevel(Green)}\n          miniSave={save.green}\n        />\n        <ColorDot\n          className=\"black\"\n          color={Blue}\n          levels={levels}\n          onSelectLevel={onSelectLevel(Blue)}\n          miniSave={save.blue}\n        />\n      </div>\n      {renderLevel2()}\n      {renderLevel3()}\n    </>\n  );\n};\n\nexport { PuzzleSelection };\n","import * as React from 'react';\nimport { Color, Move, Save, RainbowColor, RupeeColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { getPowerLogs } from '../utils';\nimport { VALID_CODES } from '../constants';\n\nexport interface NotesProps {\n  className?: string;\n  logs: string[];\n  puzzle: Puzzle;\n  save: Save;\n}\n\nconst Notes: React.FC<NotesProps> = (props) => {\n  const { className, logs, puzzle, save } = props;\n  const powerLogs = getPowerLogs(save);\n  const reversedLogs = [...logs].reverse().slice(0, 5);\n\n  const hasPowerLogs = powerLogs.length > 0;\n\n  const renderLog = (log: string) => {\n    const words = log.split(' ');\n\n    return words.map((word: string, index) => {\n      const additionalClass =\n        Object.values(Color).includes(word as any) ||\n        Object.values(RainbowColor).includes(word as any) ||\n        Object.values(RupeeColor).includes(word as any) ||\n        Object.values(Move).includes(word as any)\n          ? `${word} italic`\n          : '';\n\n      const italicClass = word === 'hexactly' ? 'italic' : '';\n      const codeClass = VALID_CODES.includes(word) ? word.toLowerCase() : '';\n\n      const successClass = ['Congrats!', 'Success:'].includes(word) ? 'green' : '';\n      const failureClass = word === 'Failure:' ? 'red' : '';\n      const objectiveClass = word === 'Objective:' ? 'orange' : '';\n      const classes = classnames(\n        codeClass,\n        objectiveClass,\n        italicClass,\n        additionalClass,\n        successClass,\n        failureClass,\n        'inline'\n      );\n\n      const key = `${word}-${index}`;\n\n      if (word === 'rainbow!') {\n        return (\n          <>\n            <div className=\"inline red\">r</div>\n            <div className=\"inline orange\">a</div>\n            <div className=\"inline yellow\">i</div>\n            <div className=\"inline white\">n</div>\n            <div className=\"inline green\">b</div>\n            <div className=\"inline blue\">o</div>\n            <div className=\"inline violet\">w</div>\n          </>\n        );\n      }\n\n      return (\n        <div className={classes} key={key}>\n          {word}{' '}\n        </div>\n      );\n    });\n  };\n\n  const renderPowerLog = (log: string) => {\n    const words = log.split(' ');\n\n    return words.map((word: string, index) => {\n      const codeClass = VALID_CODES.includes(word) ? word.toLowerCase() : '';\n      const classes = classnames('inline power', codeClass);\n      const key = `${word}-${index}`;\n\n      return (\n        <div className={classes} key={key}>\n          {word}{' '}\n        </div>\n      );\n    });\n  };\n\n  const renderPowerLogs = () => {\n    if (!hasPowerLogs) return null;\n    if (puzzle !== Puzzle.Menu) return null;\n\n    return (\n      <>\n        <br />\n        <h2>Powers</h2>\n        {powerLogs.map((log, index) => (\n          <div className=\"block\" key={`${log}-${index}`}>\n            {renderPowerLog(log)}\n          </div>\n        ))}\n      </>\n    );\n  };\n\n  const renderLogs = () => {\n    return reversedLogs.map((log, index) => (\n      <div className=\"block\" key={`${log}-${index}`}>\n        {renderLog(log)}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"\">\n      <h2>Logs</h2>\n      {renderLogs()}\n      {renderPowerLogs()}\n    </div>\n  );\n};\n\nexport { Notes };\n","import * as React from 'react';\nimport { Save, Progress, RainbowColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface DinoCrisisProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst DinoCrisis: React.FC<DinoCrisisProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const { Red, Orange, Yellow, Green, Blue, Violet } = RainbowColor;\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Produce a red to violet rainbow']), []);\n\n  const [rect, setRect] = React.useState<RainbowColor[]>([Violet, Orange, Yellow, Red, Green, Blue]);\n  const buttonsIds = [0, 1, 2, 3, 4];\n\n  return (\n    <>\n      <div className=\"flex margin-bottom\">\n        {rect.map((r) => {\n          const rectClasses = classnames('flex-one', `bg-${r}`);\n          const copy = r.charAt(0).toUpperCase();\n          return (\n            <div key={copy} className={rectClasses}>\n              {copy}\n            </div>\n          );\n        })}\n      </div>{' '}\n      <div className=\"flex\">\n        {buttonsIds.map((b, index) => {\n          const col1 = rect[index];\n          const col2 = rect[index + 1];\n\n          const onClick = () => {\n            const temp = rect[index];\n            const copyRect = clone(rect);\n            copyRect[index] = copyRect[index + 1];\n            copyRect[index + 1] = temp;\n\n            if (isEqual(copyRect, [Red, Orange, Yellow, Green, Blue, Violet])) {\n              setLogs([...logs, 'Perfect rainbow!', 'Congrats! Color green is completed']);\n              setSave({ ...save, green: Progress.Done });\n              setPuzzle(Puzzle.Menu);\n            }\n\n            setRect(copyRect);\n          };\n\n          const copy = `Swap ${col1.charAt(0).toUpperCase()} and ${col2.charAt(0).toUpperCase()}`;\n\n          return (\n            <div onClick={onClick} key={copy} className=\"mini-button flex-one\">\n              {copy}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport { DinoCrisis };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface HexaProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Hexa: React.FC<HexaProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n  const initialClues = ['I am also known as hexactly the following...', 'red 250 green 202 blue 222'];\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Find the 6-letter word', ...initialClues]), []);\n\n  const [code, setCode] = React.useState('');\n\n  const onChangeCode = (e: any) => {\n    const newCode = e.currentTarget.value.toUpperCase();\n\n    if (newCode === 'FACADE') {\n      setLogs([...logs, 'You found the 6-letter word: FACADE', 'Congrats! Color magenta is completed']);\n      setSave({ ...save, magenta: Progress.Done });\n      setPuzzle(Puzzle.Menu);\n    } else if (newCode.length === 0) {\n      setCode(newCode);\n      setLogs([...logs, ...initialClues]);\n    } else if (newCode.length > 6) {\n      setLogs([...logs, 'The word only has 6 letters']);\n    } else if (/^[A-F]+$/.test(newCode)) {\n      setCode(newCode);\n    } else if (/[G-Z]/.test(newCode)) {\n      setLogs([...logs, `6-letter word does not contain letter: ${newCode[newCode.length - 1]}`]);\n    }\n  };\n\n  return (\n    <div className=\"flex-one margin\">\n      <div className=\"flex-one hexa\">Describe me!</div>\n      <input className=\"text-center\" value={code} type=\"text\" onChange={onChangeCode} />\n    </div>\n  );\n};\n\nexport { Hexa };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface KonamiProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Konami: React.FC<KonamiProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const pos = [0, 1, 2];\n\n  const initialPosition = { x: 1, y: 1 };\n  const [position, setPosition] = React.useState(initialPosition);\n  const [sequence, setSequence] = React.useState<Move[]>([]);\n\n  const { Left, Right, Up, Down } = Move;\n\n  const correctSequence = [Up, Up, Down, Down, Left, Right, Left, Right];\n\n  React.useEffect(() => setLogs([...logs, 'Objective: Dance the Konami Sequence']), []);\n\n  const onDance = (move: Move) => {\n    let decaX = 0;\n    let decaY = 0;\n\n    if (move === Left) decaX = -1;\n    else if (move === Right) decaX = 1;\n    else if (move === Up) decaY = -1;\n    else if (move === Down) decaY = 1;\n\n    const newPosX = (position.x + decaX + pos.length) % pos.length;\n    const newPosY = (position.y + decaY + pos.length) % pos.length;\n    setPosition({ x: newPosX, y: newPosY });\n\n    const isValid = correctSequence[sequence.length] === move;\n\n    if (isValid) {\n      const newSequence = [...sequence, move];\n      setSequence(newSequence);\n      const isDone = isEqual(newSequence, correctSequence);\n\n      if (!isDone) setLogs([...logs, `Correct sequence so far: ${newSequence.join(' ')}`]);\n\n      if (isDone) {\n        setLogs([...logs, `Sequence completed: ${newSequence.join(' ')}`, 'Congrats! Color blue is completed']);\n        setSave({ ...save, blue: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      }\n    } else {\n      setSequence([]);\n      setLogs([...logs, `Sequence broken because of ${move}`]);\n    }\n  };\n\n  const renderRow = (y: number) => {\n    return pos.map((p, index) => {\n      const isPos = index === position.x && y === position.y;\n      const copy = isPos ? '+' : '-';\n      const squareClasses = classnames('inline flex-one square', { 'square-pos': isPos });\n      return <div className={squareClasses}>{copy}</div>;\n    });\n  };\n\n  const renderRows = () => {\n    return pos.map((p, index) => {\n      return <div className=\"block flex\">{renderRow(index)}</div>;\n    });\n  };\n\n  return (\n    <>\n      <div className=\"margin-bottom\">{renderRows()}</div>\n      <div onClick={() => onDance(Up)} className=\"mini-button up\">\n        Up\n      </div>\n      <div className=\"block flex\">\n        <div onClick={() => onDance(Left)} className=\"mini-button flex-one left\">\n          Left\n        </div>\n        <div onClick={() => onDance(Right)} className=\"mini-button flex-one right\">\n          Right\n        </div>\n      </div>\n      <div onClick={() => onDance(Down)} className=\"mini-button down\">\n        Down\n      </div>\n    </>\n  );\n};\n\nexport { Konami };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle, Clue } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual, uniq } from 'lodash';\nimport { get4DigitsCode } from '../utils';\n\nexport interface SleepingDogsProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst SleepingDogs: React.FC<SleepingDogsProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const [correctCode] = React.useState(get4DigitsCode());\n  const [code, setCode] = React.useState([0, 0, 0, 0]);\n  const [clues, setClues] = React.useState([Clue.White, Clue.White, Clue.White, Clue.White]);\n\n  React.useEffect(\n    () => setLogs([...logs, 'Objective: Find the correct 4-digit code', `The code uses 4 unique digits`]),\n    []\n  );\n\n  const onValid = () => {\n    const sameDigit = uniq(code).length !== 4;\n\n    if (sameDigit) {\n      setLogs([...logs, 'The code uses 4 unique digits']);\n    } else {\n      if (isEqual(correctCode, code)) {\n        setLogs([...logs, `You found the correct code: ${correctCode.join('')}`, 'Congrats! Color cyan is completed']);\n        setSave({ ...save, cyan: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      } else {\n        const copyClues = clone(clues);\n        code.map((d, index) => {\n          if (correctCode[index] === d) {\n            copyClues[index] = Clue.Green;\n          } else {\n            if (correctCode.includes(d)) {\n              copyClues[index] = Clue.Orange;\n            } else {\n              copyClues[index] = Clue.Red;\n            }\n          }\n        });\n\n        setClues(copyClues);\n\n        setLogs([...logs, 'Invalid digit: red', 'Invalid placement: orange', 'Correct placement: green']);\n      }\n    }\n  };\n\n  const onChange = (i: number, delta: number) => {\n    const newDigit = (10 + (code[i] + delta)) % 10;\n    const copyCode = clone(code);\n    const copyClues = clone(clues);\n\n    copyCode[i] = newDigit;\n    copyClues[i] = Clue.White;\n\n    setCode(copyCode);\n    setClues(copyClues);\n  };\n\n  const renderInput = (index: number) => {\n    const classesDigit = `block ${clues[index]}`;\n\n    return (\n      <div key={index} className=\"inline-block code\">\n        <div onClick={() => onChange(index, 1)} className=\"block button-digit\">\n          ▲\n        </div>\n        <div className={classesDigit}>{code[index]}</div>\n        <div onClick={() => onChange(index, -1)} className=\"block button-digit\">\n          ▼\n        </div>\n      </div>\n    );\n  };\n\n  const renderInputs = () => {\n    return (\n      <div className=\"margin-bottom\">\n        {renderInput(0)}\n        {renderInput(1)}\n        {renderInput(2)}\n        {renderInput(3)}\n      </div>\n    );\n  };\n\n  const renderValidate = () => {\n    return (\n      <div className=\"mini-button margin\" onClick={onValid}>\n        Validate entry\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex-one margin\">\n      {renderInputs()}\n      {renderValidate()}\n    </div>\n  );\n};\n\nexport { SleepingDogs };\n","import * as React from 'react';\nimport { Save, Progress, Move, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { clone, isEqual } from 'lodash';\n\nexport interface SpyroProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Spyro: React.FC<SpyroProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  const [tiles, setTiles] = React.useState([false, true, false, true, true, true, false, true, false]);\n\n  React.useEffect(\n    () => setLogs([...logs, 'Objective: Lit all the tiles', `Clicking a tile toggles its state and its neighbors'`]),\n    []\n  );\n\n  const onChange = (i: number) => {\n    if (i === 4) return;\n\n    const copyTiles = clone(tiles);\n\n    copyTiles[i] = !copyTiles[i];\n\n    if (i === 0) {\n      copyTiles[1] = !copyTiles[1];\n      copyTiles[3] = !copyTiles[3];\n    } else if (i === 1) {\n      copyTiles[0] = !copyTiles[0];\n      copyTiles[2] = !copyTiles[2];\n    } else if (i === 2) {\n      copyTiles[1] = !copyTiles[1];\n      copyTiles[5] = !copyTiles[5];\n    } else if (i === 3) {\n      copyTiles[0] = !copyTiles[0];\n      copyTiles[6] = !copyTiles[6];\n    } else if (i === 5) {\n      copyTiles[2] = !copyTiles[2];\n      copyTiles[8] = !copyTiles[8];\n    } else if (i === 6) {\n      copyTiles[3] = !copyTiles[3];\n      copyTiles[7] = !copyTiles[7];\n    } else if (i === 7) {\n      copyTiles[6] = !copyTiles[6];\n      copyTiles[8] = !copyTiles[8];\n    } else if (i === 8) {\n      copyTiles[5] = !copyTiles[5];\n      copyTiles[7] = !copyTiles[7];\n    }\n\n    setTiles(copyTiles);\n\n    if (!copyTiles.some((t) => t === false)) {\n      setLogs([...logs, 'All tiles are lit', 'Congrats! Color yellow is completed']);\n      setSave({ ...save, yellow: Progress.Done });\n      setPuzzle(Puzzle.Menu);\n    }\n  };\n\n  const renderRow = (rowIndexes: number[]) => {\n    return (\n      <div className=\"block flex\">\n        {rowIndexes.map((i, index) => {\n          const tile = tiles[i];\n          const isExistingTile = i !== 4;\n          const squareClasses = classnames('inline flex-one', {\n            'bg-white': isExistingTile && !tile,\n            'bg-black': !isExistingTile,\n            'bg-yellow': isExistingTile && tile,\n            tile: isExistingTile\n          });\n          return (\n            <div onClick={() => onChange(i)} key={index} className={squareClasses}>\n              {' '}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderTiles = () => {\n    return (\n      <div className=\"margin-bottom tiles\">\n        {renderRow([0, 1, 2])}\n        {renderRow([3, 4, 5])}\n        {renderRow([6, 7, 8])}\n      </div>\n    );\n  };\n\n  return <div className=\"flex-one margin\">{renderTiles()}</div>;\n};\n\nexport { Spyro };\n","import * as React from 'react';\nimport { Save, Progress, RainbowColor, Puzzle } from '../types';\nimport classnames from 'classnames';\nimport { getPlural, getRandomInt, getRoomColor, getRupees, getRupeesColor } from '../utils';\nimport { RUPEES_INITIAL_COUNT } from '../constants';\n\nexport interface ZeldaProps {\n  className?: string;\n  logs: string[];\n  setLogs: React.Dispatch<React.SetStateAction<string[]>>;\n  setSave: React.Dispatch<React.SetStateAction<Save>>;\n  save: Save;\n  setPuzzle: React.Dispatch<React.SetStateAction<Puzzle>>;\n}\n\nconst Zelda: React.FC<ZeldaProps> = (props) => {\n  const { className, setSave, save, setPuzzle, setLogs, logs } = props;\n\n  React.useEffect(\n    () =>\n      setLogs([\n        ...logs,\n        'Objective: Collect 50 Rupees',\n        'One chest has a key to next room, the other has rupees',\n        `You currently have ${RUPEES_INITIAL_COUNT} rupee. You are in room 1`,\n        `Pick a chest`\n      ]),\n    []\n  );\n\n  const openChest = () => {\n    const result = room === 6 ? 0 : getRandomInt(2);\n\n    if (result === 1) {\n      const newRoom = room + 1;\n      setLogs([...logs, `Chest had the key! You enter room ${newRoom}`]);\n      setRoom(newRoom);\n    } else {\n      const deltaRupees = getRupees(room);\n      const newRupees = rupees + deltaRupees;\n\n      const chestMsg = `Chest had ${deltaRupees} ${getPlural('rupee', deltaRupees)}, ${getRupeesColor(\n        deltaRupees\n      )} rupee`;\n      if (newRupees >= 50) {\n        setLogs([...logs, chestMsg, `50+ rupees collected`, 'Congrats! Color red is completed']);\n        setSave({ ...save, red: Progress.Done });\n        setPuzzle(Puzzle.Menu);\n      } else if (newRupees < 0) {\n        setLogs([...logs, chestMsg, `You wasted all your rupees`, 'Game Over, start again']);\n        setPuzzle(Puzzle.Menu);\n      } else {\n        setLogs([\n          ...logs,\n          chestMsg,\n          `You go back to room 1 and now have ${newRupees} ${getPlural('rupee', newRupees)}`\n        ]);\n        setRoom(1);\n        setRupees(newRupees);\n      }\n    }\n  };\n\n  const [rupees, setRupees] = React.useState(RUPEES_INITIAL_COUNT);\n  const [room, setRoom] = React.useState(1);\n\n  const classesRoom = classnames(`room flex bg-${getRoomColor(room)}`);\n\n  if (room === 6)\n    return (\n      <div className={classesRoom}>\n        <div onClick={openChest} className=\"flex-one chest\">\n          Final Chest\n        </div>\n      </div>\n    );\n\n  return (\n    <div className={classesRoom}>\n      <div onClick={openChest} className=\"flex-one chest\">\n        Chest 1\n      </div>\n      <div onClick={openChest} className=\"flex-one chest\">\n        Chest 2\n      </div>\n    </div>\n  );\n};\n\nexport { Zelda };\n","import * as React from 'react';\nimport { IoIosConstruct } from 'react-icons/io';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { isMobile } from 'react-device-detect';\nimport { Color, Progress, Puzzle } from './types';\nimport { PuzzleSelection } from './components/PuzzleSelection';\nimport { Notes } from './components/Notes';\nimport { DinoCrisis } from './components/DinoCrisis';\nimport { Hexa } from './components/Hexa';\nimport { Konami } from './components/Konami';\nimport { SleepingDogs } from './components/SleepingDogs';\nimport { Spyro } from './components/Spyro';\nimport { Zelda } from './components/Zelda';\n\nimport classnames from 'classnames';\nimport {\n  getDefaultSave,\n  getPuzzleColor,\n  getPuzzleText,\n  getLevelsText,\n  canMix2,\n  getNewLevelsMix2,\n  getResultLevelMix2,\n  getResultLevelMix3,\n  canMix3,\n  getNewLevelsMix3,\n  isValidCode,\n  getColorPuzzle,\n  getCodesInvalidMsg\n} from './utils';\nimport { CODE_BLUE, CODE_CYAN, CODE_GREEN, CODE_LENGTH, CODE_MAGENTA, CODE_RED, CODE_YELLOW } from './constants';\n\nconst App = () => {\n  const [logs, setLogs] = React.useState([\n    'Welcome to Coolr',\n    'This is a puzzle game',\n    'If you refresh the page, you lose progress',\n    `Make sure to write down any ${CODE_LENGTH}-letter cheat code`\n  ]);\n\n  const [code, setCode] = React.useState('');\n  const [save, setSave] = React.useState(getDefaultSave());\n  const [levels, setLevels] = React.useState<Color[]>([]);\n  const [level, setLevel] = React.useState<Color | undefined>();\n  // TODO: change\n  const [puzzle, setPuzzle] = React.useState(Puzzle.Menu);\n\n  const onRejectLevel = (level: Color) => () => {\n    setLogs([...logs, `Mix colors from floor 1 to access color ${level}`]);\n  };\n\n  const onChangeCode = (e: any) => {\n    const newCode = e.currentTarget.value.toUpperCase();\n\n    if (!newCode || /^[A-Z]+$/.test(newCode)) {\n      if (newCode.length <= CODE_LENGTH) {\n        setCode(newCode);\n\n        if (newCode.length === CODE_LENGTH) {\n          const msgInvalid = `Failure: cheat code ${newCode} is invalid`;\n\n          if (isValidCode(newCode)) {\n            const newLogs = [...logs, `Success: cheat code ${newCode} is valid`, 'Save has been loaded'];\n            const floor1 = { red: Progress.Done, green: Progress.Done, blue: Progress.Done };\n\n            if (newCode === CODE_RED) {\n              setSave({ ...save, red: Progress.Done });\n              newLogs.push('Color red is completed');\n            } else if (newCode === CODE_GREEN) {\n              setSave({ ...save, green: Progress.Done });\n              newLogs.push('Color green is completed');\n            } else if (newCode === CODE_BLUE) {\n              setSave({ ...save, blue: Progress.Done });\n              newLogs.push('Color blue is completed');\n            } else if (newCode === CODE_CYAN) {\n              setSave({ ...save, ...floor1, cyan: Progress.Done });\n              newLogs.push('Colors red green blue cyan are completed');\n            } else if (newCode === CODE_MAGENTA) {\n              setSave({ ...save, ...floor1, magenta: Progress.Done });\n              newLogs.push('Colors red green blue magenta are completed');\n            } else if (newCode === CODE_YELLOW) {\n              setSave({ ...save, ...floor1, yellow: Progress.Done });\n              newLogs.push('Colors red green blue yellow are completed');\n            }\n\n            setLogs(newLogs);\n            setPuzzle(Puzzle.Menu);\n          } else if (newCode.length === CODE_LENGTH) {\n            const additionalMsgInvalid = getCodesInvalidMsg(newCode);\n            const logsInvalid = additionalMsgInvalid\n              ? [...logs, msgInvalid, additionalMsgInvalid]\n              : [...logs, msgInvalid];\n\n            setLogs(logsInvalid);\n          }\n        }\n      }\n    }\n  };\n\n  const onSelectLevel = (level: Color) => () => {\n    let newLevels: Color[] = [];\n    let additionalLogs = [];\n\n    if (!canMix2(save)) {\n      const hasLevel = levels.includes(level);\n      newLevels = hasLevel ? [] : [level];\n\n      setLevel(newLevels[0]);\n      setLevels(newLevels);\n    } else if (canMix3(save)) {\n      newLevels = getNewLevelsMix3(levels, level);\n      setLevels(newLevels);\n\n      if (newLevels.length === 3) {\n        const resultLevelMix3 = getResultLevelMix3(newLevels);\n\n        setLevel(resultLevelMix3);\n        const levelSave = resultLevelMix3;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length === 2) {\n        const resultLevelMix2 = getResultLevelMix2(newLevels);\n\n        setLevel(resultLevelMix2);\n        const levelSave = resultLevelMix2;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length < 2) {\n        setLevel(newLevels[0]);\n      }\n    } else if (canMix2(save)) {\n      newLevels = getNewLevelsMix2(levels, level);\n      setLevels(newLevels);\n\n      if (newLevels.length === 2) {\n        const resultLevelMix2 = getResultLevelMix2(newLevels);\n\n        setLevel(resultLevelMix2);\n        const levelSave = resultLevelMix2;\n        if (levelSave && (save as any)[levelSave] !== Progress.Done) {\n          setSave({ ...save, [levelSave]: Progress.Available });\n        }\n      } else if (newLevels.length < 2) {\n        setLevel(newLevels[0]);\n      }\n    }\n\n    const levelsText = getLevelsText(newLevels);\n    additionalLogs.push(levelsText);\n    setLogs([...logs, ...additionalLogs]);\n  };\n\n  if (isMobile) {\n    return (\n      <HelmetProvider>\n        <Helmet>\n          <title>Coolr</title>\n          <link rel=\"canonical\" href=\"https://sebranly.github.io/coolr\" />\n        </Helmet>\n        <div className=\"mobile\">\n          <h1>Coolr</h1>\n          <h2>Puzzle Game</h2>\n          <div className=\"margin\">\n            This puzzle game is not accessible on mobile. Please visit it on a computer instead. Thank you for your\n            understanding!\n          </div>\n        </div>\n        <br />\n        <IoIosConstruct className=\"icon-mobile\" size=\"100px\" />\n      </HelmetProvider>\n    );\n  }\n\n  const renderSubheader = () => {\n    const subheader = getPuzzleText(puzzle);\n    const colorClass = getColorPuzzle(puzzle);\n\n    return (\n      <h2 className=\"italic\">\n        <div className={`inline ${colorClass}`}>{subheader.charAt(0)}</div>\n        {subheader.substring(1)}\n      </h2>\n    );\n  };\n\n  return (\n    <HelmetProvider>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        data-cross-origin=\"anonymous\"\n      />\n      <Helmet>\n        <title>Coolr</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/coolr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">Coolr</h1>\n        {renderSubheader()}\n\n        <div className=\"flex\">\n          <div className=\"flex-one margin\">\n            {puzzle === Puzzle.Menu && (\n              <>\n                <PuzzleSelection\n                  levels={levels}\n                  onRejectLevel={onRejectLevel}\n                  onSelectLevel={onSelectLevel}\n                  save={save}\n                />\n                {level && (\n                  <div onClick={() => setPuzzle(getPuzzleColor(level))} className=\"button\">\n                    Enter color\n                    <div className={classnames('inline', level)}>{` ${level}`}</div>\n                  </div>\n                )}\n              </>\n            )}\n\n            {puzzle === Puzzle.DinoCrisis && (\n              <DinoCrisis logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Hexa && (\n              <Hexa logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Konami && (\n              <Konami logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.SleepingDogs && (\n              <SleepingDogs logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Spyro && (\n              <Spyro logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle === Puzzle.Zelda && (\n              <Zelda logs={logs} setPuzzle={setPuzzle} setLogs={setLogs} setSave={setSave} save={save} />\n            )}\n            {puzzle !== Puzzle.Menu && (\n              <div onClick={() => setPuzzle(Puzzle.Menu)} className=\"button\">\n                Back to menu\n              </div>\n            )}\n          </div>\n          <div className=\"flex-one margin\">\n            <Notes puzzle={puzzle} logs={logs} save={save} />\n            {puzzle === Puzzle.Menu && <br />}\n            {puzzle === Puzzle.Menu && (\n              <input className=\"text-center\" value={code} type=\"text\" onChange={onChangeCode} />\n            )}\n          </div>\n        </div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}